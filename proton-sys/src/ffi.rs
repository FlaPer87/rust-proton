/* automatically generated by rust-bindgen */

pub type Enum_Unnamed1 = ::libc::c_uint;
pub const CID_pn_object: ::libc::c_uint = 1;
pub const CID_pn_void: ::libc::c_uint = 2;
pub const CID_pn_weakref: ::libc::c_uint = 3;
pub const CID_pn_string: ::libc::c_uint = 4;
pub const CID_pn_list: ::libc::c_uint = 5;
pub const CID_pn_map: ::libc::c_uint = 6;
pub const CID_pn_hash: ::libc::c_uint = 7;
pub const CID_pn_record: ::libc::c_uint = 8;
pub const CID_pn_collector: ::libc::c_uint = 9;
pub const CID_pn_event: ::libc::c_uint = 10;
pub const CID_pn_encoder: ::libc::c_uint = 11;
pub const CID_pn_decoder: ::libc::c_uint = 12;
pub const CID_pn_data: ::libc::c_uint = 13;
pub const CID_pn_connection: ::libc::c_uint = 14;
pub const CID_pn_session: ::libc::c_uint = 15;
pub const CID_pn_link: ::libc::c_uint = 16;
pub const CID_pn_delivery: ::libc::c_uint = 17;
pub const CID_pn_transport: ::libc::c_uint = 18;
pub const CID_pn_message: ::libc::c_uint = 19;
pub const CID_pn_reactor: ::libc::c_uint = 20;
pub const CID_pn_handler: ::libc::c_uint = 21;
pub const CID_pn_timer: ::libc::c_uint = 22;
pub const CID_pn_task: ::libc::c_uint = 23;
pub const CID_pn_io: ::libc::c_uint = 24;
pub const CID_pn_selector: ::libc::c_uint = 25;
pub const CID_pn_selectable: ::libc::c_uint = 26;
pub const CID_pn_url: ::libc::c_uint = 27;
pub type pn_cid_t = Enum_Unnamed1;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __clang_max_align_nonce2: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed2;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed3;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed4;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed5;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed7 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed9 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed10;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed13;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed15;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type pn_sequence_t = int32_t;
pub type pn_millis_t = uint32_t;
pub type pn_seconds_t = uint32_t;
pub type pn_timestamp_t = int64_t;
pub type pn_char_t = uint32_t;
pub type pn_decimal32_t = uint32_t;
pub type pn_decimal64_t = uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub bytes: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pn_decimal128_t = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub bytes: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pn_uuid_t = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub size: size_t,
    pub start: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pn_bytes_t = Struct_Unnamed18;
pub type pn_state_t = ::libc::c_int;
pub enum Struct_pn_connection_t { }
pub type pn_connection_t = Struct_pn_connection_t;
pub enum Struct_pn_session_t { }
pub type pn_session_t = Struct_pn_session_t;
pub enum Struct_pn_link_t { }
pub type pn_link_t = Struct_pn_link_t;
pub enum Struct_pn_delivery_t { }
pub type pn_delivery_t = Struct_pn_delivery_t;
pub enum Struct_pn_collector_t { }
pub type pn_collector_t = Struct_pn_collector_t;
pub enum Struct_pn_transport_t { }
pub type pn_transport_t = Struct_pn_transport_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type pn_handle_t = uintptr_t;
pub type pn_shandle_t = intptr_t;
pub type pn_class_t = Struct_pn_class_t;
pub enum Struct_pn_string_t { }
pub type pn_string_t = Struct_pn_string_t;
pub enum Struct_pn_list_t { }
pub type pn_list_t = Struct_pn_list_t;
pub enum Struct_pn_map_t { }
pub type pn_map_t = Struct_pn_map_t;
pub enum Struct_pn_hash_t { }
pub type pn_hash_t = Struct_pn_hash_t;
pub type pn_iterator_next_t =
    ::std::option::Option<extern "C" fn(state: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub enum Struct_pn_iterator_t { }
pub type pn_iterator_t = Struct_pn_iterator_t;
pub enum Struct_pn_record_t { }
pub type pn_record_t = Struct_pn_record_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pn_class_t {
    pub name: *const ::libc::c_char,
    pub cid: pn_cid_t,
    pub newinst: ::std::option::Option<extern "C" fn(arg1: *const pn_class_t,
                                                     arg2: size_t)
                                           -> *mut ::libc::c_void>,
    pub initialize: ::std::option::Option<extern "C" fn(arg1:
                                                            *mut ::libc::c_void)
                                              -> ()>,
    pub incref: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ()>,
    pub decref: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ()>,
    pub refcount: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void)
                                            -> ::libc::c_int>,
    pub finalize: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub free: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                        -> ()>,
    pub reify: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                         -> *const pn_class_t>,
    pub hashcode: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void)
                                            -> uintptr_t>,
    pub compare: ::std::option::Option<extern "C" fn(arg1:
                                                         *mut ::libc::c_void,
                                                     arg2:
                                                         *mut ::libc::c_void)
                                           -> intptr_t>,
    pub inspect: ::std::option::Option<extern "C" fn(arg1:
                                                         *mut ::libc::c_void,
                                                     arg2: *mut pn_string_t)
                                           -> ::libc::c_int>,
}
impl ::std::clone::Clone for Struct_pn_class_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pn_class_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_pn_error_t { }
pub type pn_error_t = Struct_pn_error_t;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const PN_NULL: ::libc::c_uint = 1;
pub const PN_BOOL: ::libc::c_uint = 2;
pub const PN_UBYTE: ::libc::c_uint = 3;
pub const PN_BYTE: ::libc::c_uint = 4;
pub const PN_USHORT: ::libc::c_uint = 5;
pub const PN_SHORT: ::libc::c_uint = 6;
pub const PN_UINT: ::libc::c_uint = 7;
pub const PN_INT: ::libc::c_uint = 8;
pub const PN_CHAR: ::libc::c_uint = 9;
pub const PN_ULONG: ::libc::c_uint = 10;
pub const PN_LONG: ::libc::c_uint = 11;
pub const PN_TIMESTAMP: ::libc::c_uint = 12;
pub const PN_FLOAT: ::libc::c_uint = 13;
pub const PN_DOUBLE: ::libc::c_uint = 14;
pub const PN_DECIMAL32: ::libc::c_uint = 15;
pub const PN_DECIMAL64: ::libc::c_uint = 16;
pub const PN_DECIMAL128: ::libc::c_uint = 17;
pub const PN_UUID: ::libc::c_uint = 18;
pub const PN_BINARY: ::libc::c_uint = 19;
pub const PN_STRING: ::libc::c_uint = 20;
pub const PN_SYMBOL: ::libc::c_uint = 21;
pub const PN_DESCRIBED: ::libc::c_uint = 22;
pub const PN_ARRAY: ::libc::c_uint = 23;
pub const PN_LIST: ::libc::c_uint = 24;
pub const PN_MAP: ::libc::c_uint = 25;
pub type pn_type_t = Enum_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub _type: pn_type_t,
    pub u: Union_Unnamed21,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed21 {
    pub unsafe fn as_bool(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_ubyte(&mut self) -> *mut uint8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_byte(&mut self) -> *mut int8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_ushort(&mut self) -> *mut uint16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_short(&mut self) -> *mut int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_uint(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_int(&mut self) -> *mut int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_char(&mut self) -> *mut pn_char_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_ulong(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_long(&mut self) -> *mut int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_timestamp(&mut self) -> *mut pn_timestamp_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_float(&mut self) -> *mut ::libc::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_double(&mut self) -> *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_decimal32(&mut self) -> *mut pn_decimal32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_decimal64(&mut self) -> *mut pn_decimal64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_decimal128(&mut self) -> *mut pn_decimal128_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_uuid(&mut self) -> *mut pn_uuid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as_bytes(&mut self) -> *mut pn_bytes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pn_atom_t = Struct_Unnamed20;
pub enum Struct_pn_data_t { }
pub type pn_data_t = Struct_pn_data_t;
pub enum Struct_pn_condition_t { }
pub type pn_condition_t = Struct_pn_condition_t;
pub enum Struct_pn_container_t { }
pub type pn_container_t = Struct_pn_container_t;
pub enum Struct_pn_disposition_t { }
pub type pn_disposition_t = Struct_pn_disposition_t;
pub type pn_delivery_tag_t = pn_bytes_t;
pub enum Struct_pn_terminus_t { }
pub type pn_terminus_t = Struct_pn_terminus_t;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const PN_UNSPECIFIED: ::libc::c_uint = 0;
pub const PN_SOURCE: ::libc::c_uint = 1;
pub const PN_TARGET: ::libc::c_uint = 2;
pub const PN_COORDINATOR: ::libc::c_uint = 3;
pub type pn_terminus_type_t = Enum_Unnamed22;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const PN_NONDURABLE: ::libc::c_uint = 0;
pub const PN_CONFIGURATION: ::libc::c_uint = 1;
pub const PN_DELIVERIES: ::libc::c_uint = 2;
pub type pn_durability_t = Enum_Unnamed23;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const PN_EXPIRE_WITH_LINK: ::libc::c_uint = 0;
pub const PN_EXPIRE_WITH_SESSION: ::libc::c_uint = 1;
pub const PN_EXPIRE_WITH_CONNECTION: ::libc::c_uint = 2;
pub const PN_EXPIRE_NEVER: ::libc::c_uint = 3;
pub type pn_expiry_policy_t = Enum_Unnamed24;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const PN_DIST_MODE_UNSPECIFIED: ::libc::c_uint = 0;
pub const PN_DIST_MODE_COPY: ::libc::c_uint = 1;
pub const PN_DIST_MODE_MOVE: ::libc::c_uint = 2;
pub type pn_distribution_mode_t = Enum_Unnamed25;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const PN_SND_UNSETTLED: ::libc::c_uint = 0;
pub const PN_SND_SETTLED: ::libc::c_uint = 1;
pub const PN_SND_MIXED: ::libc::c_uint = 2;
pub type pn_snd_settle_mode_t = Enum_Unnamed26;
pub type Enum_Unnamed27 = ::libc::c_uint;
pub const PN_RCV_FIRST: ::libc::c_uint = 0;
pub const PN_RCV_SECOND: ::libc::c_uint = 1;
pub type pn_rcv_settle_mode_t = Enum_Unnamed27;
pub enum Struct_pn_event_t { }
pub type pn_event_t = Struct_pn_event_t;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const PN_EVENT_NONE: ::libc::c_uint = 0;
pub const PN_REACTOR_INIT: ::libc::c_uint = 1;
pub const PN_REACTOR_QUIESCED: ::libc::c_uint = 2;
pub const PN_REACTOR_FINAL: ::libc::c_uint = 3;
pub const PN_TIMER_TASK: ::libc::c_uint = 4;
pub const PN_CONNECTION_INIT: ::libc::c_uint = 5;
pub const PN_CONNECTION_BOUND: ::libc::c_uint = 6;
pub const PN_CONNECTION_UNBOUND: ::libc::c_uint = 7;
pub const PN_CONNECTION_LOCAL_OPEN: ::libc::c_uint = 8;
pub const PN_CONNECTION_REMOTE_OPEN: ::libc::c_uint = 9;
pub const PN_CONNECTION_LOCAL_CLOSE: ::libc::c_uint = 10;
pub const PN_CONNECTION_REMOTE_CLOSE: ::libc::c_uint = 11;
pub const PN_CONNECTION_FINAL: ::libc::c_uint = 12;
pub const PN_SESSION_INIT: ::libc::c_uint = 13;
pub const PN_SESSION_LOCAL_OPEN: ::libc::c_uint = 14;
pub const PN_SESSION_REMOTE_OPEN: ::libc::c_uint = 15;
pub const PN_SESSION_LOCAL_CLOSE: ::libc::c_uint = 16;
pub const PN_SESSION_REMOTE_CLOSE: ::libc::c_uint = 17;
pub const PN_SESSION_FINAL: ::libc::c_uint = 18;
pub const PN_LINK_INIT: ::libc::c_uint = 19;
pub const PN_LINK_LOCAL_OPEN: ::libc::c_uint = 20;
pub const PN_LINK_REMOTE_OPEN: ::libc::c_uint = 21;
pub const PN_LINK_LOCAL_CLOSE: ::libc::c_uint = 22;
pub const PN_LINK_REMOTE_CLOSE: ::libc::c_uint = 23;
pub const PN_LINK_LOCAL_DETACH: ::libc::c_uint = 24;
pub const PN_LINK_REMOTE_DETACH: ::libc::c_uint = 25;
pub const PN_LINK_FLOW: ::libc::c_uint = 26;
pub const PN_LINK_FINAL: ::libc::c_uint = 27;
pub const PN_DELIVERY: ::libc::c_uint = 28;
pub const PN_TRANSPORT: ::libc::c_uint = 29;
pub const PN_TRANSPORT_AUTHENTICATED: ::libc::c_uint = 30;
pub const PN_TRANSPORT_ERROR: ::libc::c_uint = 31;
pub const PN_TRANSPORT_HEAD_CLOSED: ::libc::c_uint = 32;
pub const PN_TRANSPORT_TAIL_CLOSED: ::libc::c_uint = 33;
pub const PN_TRANSPORT_CLOSED: ::libc::c_uint = 34;
pub const PN_SELECTABLE_INIT: ::libc::c_uint = 35;
pub const PN_SELECTABLE_UPDATED: ::libc::c_uint = 36;
pub const PN_SELECTABLE_READABLE: ::libc::c_uint = 37;
pub const PN_SELECTABLE_WRITABLE: ::libc::c_uint = 38;
pub const PN_SELECTABLE_ERROR: ::libc::c_uint = 39;
pub const PN_SELECTABLE_EXPIRED: ::libc::c_uint = 40;
pub const PN_SELECTABLE_FINAL: ::libc::c_uint = 41;
pub type pn_event_type_t = Enum_Unnamed28;
pub type pn_trace_t = ::libc::c_int;
pub type pn_tracer_t =
    ::std::option::Option<extern "C" fn(transport: *mut pn_transport_t,
                                        message: *const ::libc::c_char)
                              -> ()>;
pub type pn_socket_t = ::libc::c_int;
pub enum Struct_pn_io_t { }
pub type pn_io_t = Struct_pn_io_t;
pub enum Struct_pn_selector_t { }
pub type pn_selector_t = Struct_pn_selector_t;
pub type pn_selectables_t = pn_iterator_t;
pub enum Struct_pn_selectable_t { }
pub type pn_selectable_t = Struct_pn_selectable_t;
pub enum Struct_pn_ssl_domain_t { }
pub type pn_ssl_domain_t = Struct_pn_ssl_domain_t;
pub enum Struct_pn_ssl_t { }
pub type pn_ssl_t = Struct_pn_ssl_t;
pub type Enum_Unnamed29 = ::libc::c_uint;
pub const PN_SSL_MODE_CLIENT: ::libc::c_uint = 1;
pub const PN_SSL_MODE_SERVER: ::libc::c_uint = 2;
pub type pn_ssl_mode_t = Enum_Unnamed29;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const PN_SSL_RESUME_UNKNOWN: ::libc::c_uint = 0;
pub const PN_SSL_RESUME_NEW: ::libc::c_uint = 1;
pub const PN_SSL_RESUME_REUSED: ::libc::c_uint = 2;
pub type pn_ssl_resume_status_t = Enum_Unnamed30;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const PN_SSL_VERIFY_NULL: ::libc::c_uint = 0;
pub const PN_SSL_VERIFY_PEER: ::libc::c_uint = 1;
pub const PN_SSL_ANONYMOUS_PEER: ::libc::c_uint = 2;
pub const PN_SSL_VERIFY_PEER_NAME: ::libc::c_uint = 3;
pub type pn_ssl_verify_mode_t = Enum_Unnamed31;
pub enum Struct_pn_handler_t { }
pub type pn_handler_t = Struct_pn_handler_t;
pub enum Struct_pn_reactor_t { }
pub type pn_reactor_t = Struct_pn_reactor_t;
pub enum Struct_pn_acceptor_t { }
pub type pn_acceptor_t = Struct_pn_acceptor_t;
pub enum Struct_pn_timer_t { }
pub type pn_timer_t = Struct_pn_timer_t;
pub enum Struct_pn_task_t { }
pub type pn_task_t = Struct_pn_task_t;
pub type pn_handshaker_t = pn_handler_t;
pub type pn_iohandler_t = pn_handler_t;
pub type pn_flowcontroller_t = pn_handler_t;
pub type pn_logger_t =
    ::std::option::Option<extern "C" fn(message: *const ::libc::c_char)
                              -> ()>;
pub enum Struct_pn_message_t { }
pub type pn_message_t = Struct_pn_message_t;
pub enum Struct_pn_messenger_t { }
pub type pn_messenger_t = Struct_pn_messenger_t;
pub enum Struct_pn_subscription_t { }
pub type pn_subscription_t = Struct_pn_subscription_t;
pub type pn_tracker_t = int64_t;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const PN_STATUS_UNKNOWN: ::libc::c_uint = 0;
pub const PN_STATUS_PENDING: ::libc::c_uint = 1;
pub const PN_STATUS_ACCEPTED: ::libc::c_uint = 2;
pub const PN_STATUS_REJECTED: ::libc::c_uint = 3;
pub const PN_STATUS_RELEASED: ::libc::c_uint = 4;
pub const PN_STATUS_MODIFIED: ::libc::c_uint = 5;
pub const PN_STATUS_ABORTED: ::libc::c_uint = 6;
pub const PN_STATUS_SETTLED: ::libc::c_uint = 7;
pub type pn_status_t = Enum_Unnamed32;
pub enum Struct_pn_parser_t { }
pub type pn_parser_t = Struct_pn_parser_t;
pub enum Struct_pn_sasl_t { }
pub type pn_sasl_t = Struct_pn_sasl_t;
pub type Enum_Unnamed33 = ::libc::c_int;
pub const PN_SASL_NONE: ::libc::c_int = -1;
pub const PN_SASL_OK: ::libc::c_int = 0;
pub const PN_SASL_AUTH: ::libc::c_int = 1;
pub const PN_SASL_SYS: ::libc::c_int = 2;
pub const PN_SASL_PERM: ::libc::c_int = 3;
pub const PN_SASL_TEMP: ::libc::c_int = 4;
pub type pn_sasl_outcome_t = Enum_Unnamed33;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const PN_TOK_LBRACE: ::libc::c_uint = 0;
pub const PN_TOK_RBRACE: ::libc::c_uint = 1;
pub const PN_TOK_LBRACKET: ::libc::c_uint = 2;
pub const PN_TOK_RBRACKET: ::libc::c_uint = 3;
pub const PN_TOK_EQUAL: ::libc::c_uint = 4;
pub const PN_TOK_COMMA: ::libc::c_uint = 5;
pub const PN_TOK_POS: ::libc::c_uint = 6;
pub const PN_TOK_NEG: ::libc::c_uint = 7;
pub const PN_TOK_DOT: ::libc::c_uint = 8;
pub const PN_TOK_AT: ::libc::c_uint = 9;
pub const PN_TOK_DOLLAR: ::libc::c_uint = 10;
pub const PN_TOK_BINARY: ::libc::c_uint = 11;
pub const PN_TOK_STRING: ::libc::c_uint = 12;
pub const PN_TOK_SYMBOL: ::libc::c_uint = 13;
pub const PN_TOK_ID: ::libc::c_uint = 14;
pub const PN_TOK_FLOAT: ::libc::c_uint = 15;
pub const PN_TOK_INT: ::libc::c_uint = 16;
pub const PN_TOK_TRUE: ::libc::c_uint = 17;
pub const PN_TOK_FALSE: ::libc::c_uint = 18;
pub const PN_TOK_NULL: ::libc::c_uint = 19;
pub const PN_TOK_EOS: ::libc::c_uint = 20;
pub const PN_TOK_ERR: ::libc::c_uint = 21;
pub type pn_token_type_t = Enum_Unnamed34;
pub enum Struct_pn_scanner_t { }
pub type pn_scanner_t = Struct_pn_scanner_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub _type: pn_token_type_t,
    pub start: *const ::libc::c_char,
    pub size: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pn_token_t = Struct_Unnamed35;
pub enum Struct_pn_url_t { }
pub type pn_url_t = Struct_pn_url_t;
#[link(name = "qpid-proton")]
extern "C" {
    pub static mut PN_OBJECT: *const pn_class_t;
    pub static mut PN_VOID: *const pn_class_t;
    pub static mut PN_WEAKREF: *const pn_class_t;
}
#[link(name = "qpid-proton")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn pn_bytes(size: size_t, start: *const ::libc::c_char) -> pn_bytes_t;
    pub fn pn_class_id(clazz: *const pn_class_t) -> pn_cid_t;
    pub fn pn_class_name(clazz: *const pn_class_t) -> *const ::libc::c_char;
    pub fn pn_class_new(clazz: *const pn_class_t, size: size_t)
     -> *mut ::libc::c_void;
    pub fn pn_class_incref(clazz: *const pn_class_t,
                           object: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn pn_class_refcount(clazz: *const pn_class_t,
                             object: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_class_decref(clazz: *const pn_class_t,
                           object: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_class_free(clazz: *const pn_class_t,
                         object: *mut ::libc::c_void) -> ();
    pub fn pn_class_reify(clazz: *const pn_class_t,
                          object: *mut ::libc::c_void) -> *const pn_class_t;
    pub fn pn_class_hashcode(clazz: *const pn_class_t,
                             object: *mut ::libc::c_void) -> uintptr_t;
    pub fn pn_class_compare(clazz: *const pn_class_t, a: *mut ::libc::c_void,
                            b: *mut ::libc::c_void) -> intptr_t;
    pub fn pn_class_equals(clazz: *const pn_class_t, a: *mut ::libc::c_void,
                           b: *mut ::libc::c_void) -> u8;
    pub fn pn_class_inspect(clazz: *const pn_class_t,
                            object: *mut ::libc::c_void,
                            dst: *mut pn_string_t) -> ::libc::c_int;
    pub fn pn_void_hashcode(object: *mut ::libc::c_void) -> uintptr_t;
    pub fn pn_void_compare(a: *mut ::libc::c_void, b: *mut ::libc::c_void)
     -> intptr_t;
    pub fn pn_void_inspect(object: *mut ::libc::c_void, dst: *mut pn_string_t)
     -> ::libc::c_int;
    pub fn pn_object_new(clazz: *const pn_class_t, size: size_t)
     -> *mut ::libc::c_void;
    pub fn pn_object_reify(object: *mut ::libc::c_void) -> *const pn_class_t;
    pub fn pn_object_incref(object: *mut ::libc::c_void) -> ();
    pub fn pn_object_refcount(object: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_object_decref(object: *mut ::libc::c_void) -> ();
    pub fn pn_object_free(object: *mut ::libc::c_void) -> ();
    pub fn pn_incref(object: *mut ::libc::c_void) -> *mut ::libc::c_void;
    pub fn pn_decref(object: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_refcount(object: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_free(object: *mut ::libc::c_void) -> ();
    pub fn pn_class(object: *mut ::libc::c_void) -> *const pn_class_t;
    pub fn pn_hashcode(object: *mut ::libc::c_void) -> uintptr_t;
    pub fn pn_compare(a: *mut ::libc::c_void, b: *mut ::libc::c_void)
     -> intptr_t;
    pub fn pn_equals(a: *mut ::libc::c_void, b: *mut ::libc::c_void) -> u8;
    pub fn pn_inspect(object: *mut ::libc::c_void, dst: *mut pn_string_t)
     -> ::libc::c_int;
    pub fn pn_list(clazz: *const pn_class_t, capacity: size_t)
     -> *mut pn_list_t;
    pub fn pn_list_size(list: *mut pn_list_t) -> size_t;
    pub fn pn_list_get(list: *mut pn_list_t, index: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn pn_list_set(list: *mut pn_list_t, index: ::libc::c_int,
                       value: *mut ::libc::c_void) -> ();
    pub fn pn_list_add(list: *mut pn_list_t, value: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pn_list_pop(list: *mut pn_list_t) -> *mut ::libc::c_void;
    pub fn pn_list_index(list: *mut pn_list_t, value: *mut ::libc::c_void)
     -> ssize_t;
    pub fn pn_list_remove(list: *mut pn_list_t, value: *mut ::libc::c_void)
     -> u8;
    pub fn pn_list_del(list: *mut pn_list_t, index: ::libc::c_int,
                       n: ::libc::c_int) -> ();
    pub fn pn_list_clear(list: *mut pn_list_t) -> ();
    pub fn pn_list_iterator(list: *mut pn_list_t, iter: *mut pn_iterator_t)
     -> ();
    pub fn pn_list_minpush(list: *mut pn_list_t, value: *mut ::libc::c_void)
     -> ();
    pub fn pn_list_minpop(list: *mut pn_list_t) -> *mut ::libc::c_void;
    pub fn pn_map(key: *const pn_class_t, value: *const pn_class_t,
                  capacity: size_t, load_factor: ::libc::c_float)
     -> *mut pn_map_t;
    pub fn pn_map_size(map: *mut pn_map_t) -> size_t;
    pub fn pn_map_put(map: *mut pn_map_t, key: *mut ::libc::c_void,
                      value: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_map_get(map: *mut pn_map_t, key: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn pn_map_del(map: *mut pn_map_t, key: *mut ::libc::c_void) -> ();
    pub fn pn_map_head(map: *mut pn_map_t) -> pn_handle_t;
    pub fn pn_map_next(map: *mut pn_map_t, entry: pn_handle_t) -> pn_handle_t;
    pub fn pn_map_key(map: *mut pn_map_t, entry: pn_handle_t)
     -> *mut ::libc::c_void;
    pub fn pn_map_value(map: *mut pn_map_t, entry: pn_handle_t)
     -> *mut ::libc::c_void;
    pub fn pn_hash(clazz: *const pn_class_t, capacity: size_t,
                   load_factor: ::libc::c_float) -> *mut pn_hash_t;
    pub fn pn_hash_size(hash: *mut pn_hash_t) -> size_t;
    pub fn pn_hash_put(hash: *mut pn_hash_t, key: uintptr_t,
                       value: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pn_hash_get(hash: *mut pn_hash_t, key: uintptr_t)
     -> *mut ::libc::c_void;
    pub fn pn_hash_del(hash: *mut pn_hash_t, key: uintptr_t) -> ();
    pub fn pn_hash_head(hash: *mut pn_hash_t) -> pn_handle_t;
    pub fn pn_hash_next(hash: *mut pn_hash_t, entry: pn_handle_t)
     -> pn_handle_t;
    pub fn pn_hash_key(hash: *mut pn_hash_t, entry: pn_handle_t) -> uintptr_t;
    pub fn pn_hash_value(hash: *mut pn_hash_t, entry: pn_handle_t)
     -> *mut ::libc::c_void;
    pub fn pn_string(bytes: *const ::libc::c_char) -> *mut pn_string_t;
    pub fn pn_stringn(bytes: *const ::libc::c_char, n: size_t)
     -> *mut pn_string_t;
    pub fn pn_string_get(string: *mut pn_string_t) -> *const ::libc::c_char;
    pub fn pn_string_size(string: *mut pn_string_t) -> size_t;
    pub fn pn_string_set(string: *mut pn_string_t,
                         bytes: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pn_string_setn(string: *mut pn_string_t,
                          bytes: *const ::libc::c_char, n: size_t)
     -> ::libc::c_int;
    pub fn pn_string_put(string: *mut pn_string_t, dst: *mut ::libc::c_char)
     -> ssize_t;
    pub fn pn_string_clear(string: *mut pn_string_t) -> ();
    pub fn pn_string_format(string: *mut pn_string_t,
                            format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn pn_string_vformat(string: *mut pn_string_t,
                             format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn pn_string_addf(string: *mut pn_string_t,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn pn_string_vaddf(string: *mut pn_string_t,
                           format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn pn_string_grow(string: *mut pn_string_t, capacity: size_t)
     -> ::libc::c_int;
    pub fn pn_string_buffer(string: *mut pn_string_t) -> *mut ::libc::c_char;
    pub fn pn_string_capacity(string: *mut pn_string_t) -> size_t;
    pub fn pn_string_resize(string: *mut pn_string_t, size: size_t)
     -> ::libc::c_int;
    pub fn pn_string_copy(string: *mut pn_string_t, src: *mut pn_string_t)
     -> ::libc::c_int;
    pub fn pn_iterator() -> *mut pn_iterator_t;
    pub fn pn_iterator_start(iterator: *mut pn_iterator_t,
                             next: pn_iterator_next_t, size: size_t)
     -> *mut ::libc::c_void;
    pub fn pn_iterator_next(iterator: *mut pn_iterator_t)
     -> *mut ::libc::c_void;
    pub fn pn_record() -> *mut pn_record_t;
    pub fn pn_record_def(record: *mut pn_record_t, key: pn_handle_t,
                         clazz: *const pn_class_t) -> ();
    pub fn pn_record_has(record: *mut pn_record_t, key: pn_handle_t) -> u8;
    pub fn pn_record_get(record: *mut pn_record_t, key: pn_handle_t)
     -> *mut ::libc::c_void;
    pub fn pn_record_set(record: *mut pn_record_t, key: pn_handle_t,
                         value: *mut ::libc::c_void) -> ();
    pub fn pn_record_clear(record: *mut pn_record_t) -> ();
    pub fn pn_code(code: ::libc::c_int) -> *const ::libc::c_char;
    pub fn pn_error() -> *mut pn_error_t;
    pub fn pn_error_free(error: *mut pn_error_t) -> ();
    pub fn pn_error_clear(error: *mut pn_error_t) -> ();
    pub fn pn_error_set(error: *mut pn_error_t, code: ::libc::c_int,
                        text: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pn_error_vformat(error: *mut pn_error_t, code: ::libc::c_int,
                            fmt: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn pn_error_format(error: *mut pn_error_t, code: ::libc::c_int,
                           fmt: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn pn_error_code(error: *mut pn_error_t) -> ::libc::c_int;
    pub fn pn_error_text(error: *mut pn_error_t) -> *const ::libc::c_char;
    pub fn pn_error_copy(error: *mut pn_error_t, src: *mut pn_error_t)
     -> ::libc::c_int;
    pub fn pn_type_name(_type: pn_type_t) -> *const ::libc::c_char;
    pub fn pn_data(capacity: size_t) -> *mut pn_data_t;
    pub fn pn_data_free(data: *mut pn_data_t) -> ();
    pub fn pn_data_errno(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_error(data: *mut pn_data_t) -> *mut pn_error_t;
    pub fn pn_data_vfill(data: *mut pn_data_t, fmt: *const ::libc::c_char,
                         ap: va_list) -> ::libc::c_int;
    pub fn pn_data_fill(data: *mut pn_data_t, fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn pn_data_vscan(data: *mut pn_data_t, fmt: *const ::libc::c_char,
                         ap: va_list) -> ::libc::c_int;
    pub fn pn_data_scan(data: *mut pn_data_t, fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn pn_data_clear(data: *mut pn_data_t) -> ();
    pub fn pn_data_size(data: *mut pn_data_t) -> size_t;
    pub fn pn_data_rewind(data: *mut pn_data_t) -> ();
    pub fn pn_data_next(data: *mut pn_data_t) -> u8;
    pub fn pn_data_prev(data: *mut pn_data_t) -> u8;
    pub fn pn_data_enter(data: *mut pn_data_t) -> u8;
    pub fn pn_data_exit(data: *mut pn_data_t) -> u8;
    pub fn pn_data_lookup(data: *mut pn_data_t, name: *const ::libc::c_char)
     -> u8;
    pub fn pn_data_type(data: *mut pn_data_t) -> pn_type_t;
    pub fn pn_data_print(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_format(data: *mut pn_data_t, bytes: *mut ::libc::c_char,
                          size: *mut size_t) -> ::libc::c_int;
    pub fn pn_data_encode(data: *mut pn_data_t, bytes: *mut ::libc::c_char,
                          size: size_t) -> ssize_t;
    pub fn pn_data_encoded_size(data: *mut pn_data_t) -> ssize_t;
    pub fn pn_data_decode(data: *mut pn_data_t, bytes: *const ::libc::c_char,
                          size: size_t) -> ssize_t;
    pub fn pn_data_put_list(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_put_map(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_put_array(data: *mut pn_data_t, described: u8,
                             _type: pn_type_t) -> ::libc::c_int;
    pub fn pn_data_put_described(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_put_null(data: *mut pn_data_t) -> ::libc::c_int;
    pub fn pn_data_put_bool(data: *mut pn_data_t, b: u8) -> ::libc::c_int;
    pub fn pn_data_put_ubyte(data: *mut pn_data_t, ub: uint8_t)
     -> ::libc::c_int;
    pub fn pn_data_put_byte(data: *mut pn_data_t, b: int8_t) -> ::libc::c_int;
    pub fn pn_data_put_ushort(data: *mut pn_data_t, us: uint16_t)
     -> ::libc::c_int;
    pub fn pn_data_put_short(data: *mut pn_data_t, s: int16_t)
     -> ::libc::c_int;
    pub fn pn_data_put_uint(data: *mut pn_data_t, ui: uint32_t)
     -> ::libc::c_int;
    pub fn pn_data_put_int(data: *mut pn_data_t, i: int32_t) -> ::libc::c_int;
    pub fn pn_data_put_char(data: *mut pn_data_t, c: pn_char_t)
     -> ::libc::c_int;
    pub fn pn_data_put_ulong(data: *mut pn_data_t, ul: uint64_t)
     -> ::libc::c_int;
    pub fn pn_data_put_long(data: *mut pn_data_t, l: int64_t)
     -> ::libc::c_int;
    pub fn pn_data_put_timestamp(data: *mut pn_data_t, t: pn_timestamp_t)
     -> ::libc::c_int;
    pub fn pn_data_put_float(data: *mut pn_data_t, f: ::libc::c_float)
     -> ::libc::c_int;
    pub fn pn_data_put_double(data: *mut pn_data_t, d: ::libc::c_double)
     -> ::libc::c_int;
    pub fn pn_data_put_decimal32(data: *mut pn_data_t, d: pn_decimal32_t)
     -> ::libc::c_int;
    pub fn pn_data_put_decimal64(data: *mut pn_data_t, d: pn_decimal64_t)
     -> ::libc::c_int;
    pub fn pn_data_put_decimal128(data: *mut pn_data_t, d: pn_decimal128_t)
     -> ::libc::c_int;
    pub fn pn_data_put_uuid(data: *mut pn_data_t, u: pn_uuid_t)
     -> ::libc::c_int;
    pub fn pn_data_put_binary(data: *mut pn_data_t, bytes: pn_bytes_t)
     -> ::libc::c_int;
    pub fn pn_data_put_string(data: *mut pn_data_t, string: pn_bytes_t)
     -> ::libc::c_int;
    pub fn pn_data_put_symbol(data: *mut pn_data_t, symbol: pn_bytes_t)
     -> ::libc::c_int;
    pub fn pn_data_put_atom(data: *mut pn_data_t, atom: pn_atom_t)
     -> ::libc::c_int;
    pub fn pn_data_get_list(data: *mut pn_data_t) -> size_t;
    pub fn pn_data_get_map(data: *mut pn_data_t) -> size_t;
    pub fn pn_data_get_array(data: *mut pn_data_t) -> size_t;
    pub fn pn_data_is_array_described(data: *mut pn_data_t) -> u8;
    pub fn pn_data_get_array_type(data: *mut pn_data_t) -> pn_type_t;
    pub fn pn_data_is_described(data: *mut pn_data_t) -> u8;
    pub fn pn_data_is_null(data: *mut pn_data_t) -> u8;
    pub fn pn_data_get_bool(data: *mut pn_data_t) -> u8;
    pub fn pn_data_get_ubyte(data: *mut pn_data_t) -> uint8_t;
    pub fn pn_data_get_byte(data: *mut pn_data_t) -> int8_t;
    pub fn pn_data_get_ushort(data: *mut pn_data_t) -> uint16_t;
    pub fn pn_data_get_short(data: *mut pn_data_t) -> int16_t;
    pub fn pn_data_get_uint(data: *mut pn_data_t) -> uint32_t;
    pub fn pn_data_get_int(data: *mut pn_data_t) -> int32_t;
    pub fn pn_data_get_char(data: *mut pn_data_t) -> pn_char_t;
    pub fn pn_data_get_ulong(data: *mut pn_data_t) -> uint64_t;
    pub fn pn_data_get_long(data: *mut pn_data_t) -> int64_t;
    pub fn pn_data_get_timestamp(data: *mut pn_data_t) -> pn_timestamp_t;
    pub fn pn_data_get_float(data: *mut pn_data_t) -> ::libc::c_float;
    pub fn pn_data_get_double(data: *mut pn_data_t) -> ::libc::c_double;
    pub fn pn_data_get_decimal32(data: *mut pn_data_t) -> pn_decimal32_t;
    pub fn pn_data_get_decimal64(data: *mut pn_data_t) -> pn_decimal64_t;
    pub fn pn_data_get_decimal128(data: *mut pn_data_t) -> pn_decimal128_t;
    pub fn pn_data_get_uuid(data: *mut pn_data_t) -> pn_uuid_t;
    pub fn pn_data_get_binary(data: *mut pn_data_t) -> pn_bytes_t;
    pub fn pn_data_get_string(data: *mut pn_data_t) -> pn_bytes_t;
    pub fn pn_data_get_symbol(data: *mut pn_data_t) -> pn_bytes_t;
    pub fn pn_data_get_bytes(data: *mut pn_data_t) -> pn_bytes_t;
    pub fn pn_data_get_atom(data: *mut pn_data_t) -> pn_atom_t;
    pub fn pn_data_copy(data: *mut pn_data_t, src: *mut pn_data_t)
     -> ::libc::c_int;
    pub fn pn_data_append(data: *mut pn_data_t, src: *mut pn_data_t)
     -> ::libc::c_int;
    pub fn pn_data_appendn(data: *mut pn_data_t, src: *mut pn_data_t,
                           limit: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_data_narrow(data: *mut pn_data_t) -> ();
    pub fn pn_data_widen(data: *mut pn_data_t) -> ();
    pub fn pn_data_point(data: *mut pn_data_t) -> pn_handle_t;
    pub fn pn_data_restore(data: *mut pn_data_t, point: pn_handle_t) -> u8;
    pub fn pn_data_dump(data: *mut pn_data_t) -> ();
    pub fn pn_condition_is_set(condition: *mut pn_condition_t) -> u8;
    pub fn pn_condition_clear(condition: *mut pn_condition_t) -> ();
    pub fn pn_condition_get_name(condition: *mut pn_condition_t)
     -> *const ::libc::c_char;
    pub fn pn_condition_set_name(condition: *mut pn_condition_t,
                                 name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_condition_get_description(condition: *mut pn_condition_t)
     -> *const ::libc::c_char;
    pub fn pn_condition_set_description(condition: *mut pn_condition_t,
                                        description: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_condition_info(condition: *mut pn_condition_t)
     -> *mut pn_data_t;
    pub fn pn_condition_is_redirect(condition: *mut pn_condition_t) -> u8;
    pub fn pn_condition_redirect_host(condition: *mut pn_condition_t)
     -> *const ::libc::c_char;
    pub fn pn_condition_redirect_port(condition: *mut pn_condition_t)
     -> ::libc::c_int;
    pub fn pn_connection() -> *mut pn_connection_t;
    pub fn pn_connection_free(connection: *mut pn_connection_t) -> ();
    pub fn pn_connection_release(connection: *mut pn_connection_t) -> ();
    pub fn pn_connection_error(connection: *mut pn_connection_t)
     -> *mut pn_error_t;
    pub fn pn_connection_collect(connection: *mut pn_connection_t,
                                 collector: *mut pn_collector_t) -> ();
    pub fn pn_connection_get_context(connection: *mut pn_connection_t)
     -> *mut ::libc::c_void;
    pub fn pn_connection_set_context(connection: *mut pn_connection_t,
                                     context: *mut ::libc::c_void) -> ();
    pub fn pn_connection_attachments(connection: *mut pn_connection_t)
     -> *mut pn_record_t;
    pub fn pn_connection_state(connection: *mut pn_connection_t)
     -> pn_state_t;
    pub fn pn_connection_open(connection: *mut pn_connection_t) -> ();
    pub fn pn_connection_close(connection: *mut pn_connection_t) -> ();
    pub fn pn_connection_reset(connection: *mut pn_connection_t) -> ();
    pub fn pn_connection_condition(connection: *mut pn_connection_t)
     -> *mut pn_condition_t;
    pub fn pn_connection_remote_condition(connection: *mut pn_connection_t)
     -> *mut pn_condition_t;
    pub fn pn_connection_get_container(connection: *mut pn_connection_t)
     -> *const ::libc::c_char;
    pub fn pn_connection_set_container(connection: *mut pn_connection_t,
                                       container: *const ::libc::c_char)
     -> ();
    pub fn pn_connection_set_user(connection: *mut pn_connection_t,
                                  user: *const ::libc::c_char) -> ();
    pub fn pn_connection_set_password(connection: *mut pn_connection_t,
                                      password: *const ::libc::c_char) -> ();
    pub fn pn_connection_get_user(connection: *mut pn_connection_t)
     -> *const ::libc::c_char;
    pub fn pn_connection_get_hostname(connection: *mut pn_connection_t)
     -> *const ::libc::c_char;
    pub fn pn_connection_set_hostname(connection: *mut pn_connection_t,
                                      hostname: *const ::libc::c_char) -> ();
    pub fn pn_connection_remote_container(connection: *mut pn_connection_t)
     -> *const ::libc::c_char;
    pub fn pn_connection_remote_hostname(connection: *mut pn_connection_t)
     -> *const ::libc::c_char;
    pub fn pn_connection_offered_capabilities(connection:
                                                  *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_desired_capabilities(connection:
                                                  *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_properties(connection: *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_remote_offered_capabilities(connection:
                                                         *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_remote_desired_capabilities(connection:
                                                         *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_remote_properties(connection: *mut pn_connection_t)
     -> *mut pn_data_t;
    pub fn pn_connection_transport(connection: *mut pn_connection_t)
     -> *mut pn_transport_t;
    pub fn pn_disposition_type(disposition: *mut pn_disposition_t)
     -> uint64_t;
    pub fn pn_disposition_condition(disposition: *mut pn_disposition_t)
     -> *mut pn_condition_t;
    pub fn pn_disposition_data(disposition: *mut pn_disposition_t)
     -> *mut pn_data_t;
    pub fn pn_disposition_get_section_number(disposition:
                                                 *mut pn_disposition_t)
     -> uint32_t;
    pub fn pn_disposition_set_section_number(disposition:
                                                 *mut pn_disposition_t,
                                             section_number: uint32_t) -> ();
    pub fn pn_disposition_get_section_offset(disposition:
                                                 *mut pn_disposition_t)
     -> uint64_t;
    pub fn pn_disposition_set_section_offset(disposition:
                                                 *mut pn_disposition_t,
                                             section_offset: uint64_t) -> ();
    pub fn pn_disposition_is_failed(disposition: *mut pn_disposition_t) -> u8;
    pub fn pn_disposition_set_failed(disposition: *mut pn_disposition_t,
                                     failed: u8) -> ();
    pub fn pn_disposition_is_undeliverable(disposition: *mut pn_disposition_t)
     -> u8;
    pub fn pn_disposition_set_undeliverable(disposition:
                                                *mut pn_disposition_t,
                                            undeliverable: u8) -> ();
    pub fn pn_disposition_annotations(disposition: *mut pn_disposition_t)
     -> *mut pn_data_t;
    pub fn pn_delivery(link: *mut pn_link_t, tag: pn_delivery_tag_t)
     -> *mut pn_delivery_t;
    pub fn pn_delivery_get_context(delivery: *mut pn_delivery_t)
     -> *mut ::libc::c_void;
    pub fn pn_delivery_set_context(delivery: *mut pn_delivery_t,
                                   context: *mut ::libc::c_void) -> ();
    pub fn pn_delivery_attachments(delivery: *mut pn_delivery_t)
     -> *mut pn_record_t;
    pub fn pn_delivery_tag(delivery: *mut pn_delivery_t) -> pn_delivery_tag_t;
    pub fn pn_delivery_link(delivery: *mut pn_delivery_t) -> *mut pn_link_t;
    pub fn pn_delivery_local(delivery: *mut pn_delivery_t)
     -> *mut pn_disposition_t;
    pub fn pn_delivery_local_state(delivery: *mut pn_delivery_t) -> uint64_t;
    pub fn pn_delivery_remote(delivery: *mut pn_delivery_t)
     -> *mut pn_disposition_t;
    pub fn pn_delivery_remote_state(delivery: *mut pn_delivery_t) -> uint64_t;
    pub fn pn_delivery_settled(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_pending(delivery: *mut pn_delivery_t) -> size_t;
    pub fn pn_delivery_partial(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_writable(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_readable(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_updated(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_update(delivery: *mut pn_delivery_t, state: uint64_t)
     -> ();
    pub fn pn_delivery_clear(delivery: *mut pn_delivery_t) -> ();
    pub fn pn_delivery_current(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_delivery_settle(delivery: *mut pn_delivery_t) -> ();
    pub fn pn_delivery_dump(delivery: *mut pn_delivery_t) -> ();
    pub fn pn_delivery_buffered(delivery: *mut pn_delivery_t) -> u8;
    pub fn pn_work_head(connection: *mut pn_connection_t)
     -> *mut pn_delivery_t;
    pub fn pn_work_next(delivery: *mut pn_delivery_t) -> *mut pn_delivery_t;
    pub fn pn_session(connection: *mut pn_connection_t) -> *mut pn_session_t;
    pub fn pn_session_free(session: *mut pn_session_t) -> ();
    pub fn pn_session_get_context(session: *mut pn_session_t)
     -> *mut ::libc::c_void;
    pub fn pn_session_set_context(session: *mut pn_session_t,
                                  context: *mut ::libc::c_void) -> ();
    pub fn pn_session_attachments(session: *mut pn_session_t)
     -> *mut pn_record_t;
    pub fn pn_session_state(session: *mut pn_session_t) -> pn_state_t;
    pub fn pn_session_error(session: *mut pn_session_t) -> *mut pn_error_t;
    pub fn pn_session_condition(session: *mut pn_session_t)
     -> *mut pn_condition_t;
    pub fn pn_session_remote_condition(session: *mut pn_session_t)
     -> *mut pn_condition_t;
    pub fn pn_session_connection(session: *mut pn_session_t)
     -> *mut pn_connection_t;
    pub fn pn_session_open(session: *mut pn_session_t) -> ();
    pub fn pn_session_close(session: *mut pn_session_t) -> ();
    pub fn pn_session_get_incoming_capacity(session: *mut pn_session_t)
     -> size_t;
    pub fn pn_session_set_incoming_capacity(session: *mut pn_session_t,
                                            capacity: size_t) -> ();
    pub fn pn_session_outgoing_bytes(session: *mut pn_session_t) -> size_t;
    pub fn pn_session_incoming_bytes(session: *mut pn_session_t) -> size_t;
    pub fn pn_session_head(connection: *mut pn_connection_t,
                           state: pn_state_t) -> *mut pn_session_t;
    pub fn pn_session_next(session: *mut pn_session_t, state: pn_state_t)
     -> *mut pn_session_t;
    pub fn pn_terminus_get_type(terminus: *mut pn_terminus_t)
     -> pn_terminus_type_t;
    pub fn pn_terminus_set_type(terminus: *mut pn_terminus_t,
                                _type: pn_terminus_type_t) -> ::libc::c_int;
    pub fn pn_terminus_get_address(terminus: *mut pn_terminus_t)
     -> *const ::libc::c_char;
    pub fn pn_terminus_set_address(terminus: *mut pn_terminus_t,
                                   address: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_terminus_get_distribution_mode(terminus: *const pn_terminus_t)
     -> pn_distribution_mode_t;
    pub fn pn_terminus_set_distribution_mode(terminus: *mut pn_terminus_t,
                                             mode: pn_distribution_mode_t)
     -> ::libc::c_int;
    pub fn pn_terminus_get_durability(terminus: *mut pn_terminus_t)
     -> pn_durability_t;
    pub fn pn_terminus_set_durability(terminus: *mut pn_terminus_t,
                                      durability: pn_durability_t)
     -> ::libc::c_int;
    pub fn pn_terminus_get_expiry_policy(terminus: *mut pn_terminus_t)
     -> pn_expiry_policy_t;
    pub fn pn_terminus_set_expiry_policy(terminus: *mut pn_terminus_t,
                                         policy: pn_expiry_policy_t)
     -> ::libc::c_int;
    pub fn pn_terminus_get_timeout(terminus: *mut pn_terminus_t)
     -> pn_seconds_t;
    pub fn pn_terminus_set_timeout(terminus: *mut pn_terminus_t,
                                   timeout: pn_seconds_t) -> ::libc::c_int;
    pub fn pn_terminus_is_dynamic(terminus: *mut pn_terminus_t) -> u8;
    pub fn pn_terminus_set_dynamic(terminus: *mut pn_terminus_t, dynamic: u8)
     -> ::libc::c_int;
    pub fn pn_terminus_properties(terminus: *mut pn_terminus_t)
     -> *mut pn_data_t;
    pub fn pn_terminus_capabilities(terminus: *mut pn_terminus_t)
     -> *mut pn_data_t;
    pub fn pn_terminus_outcomes(terminus: *mut pn_terminus_t)
     -> *mut pn_data_t;
    pub fn pn_terminus_filter(terminus: *mut pn_terminus_t) -> *mut pn_data_t;
    pub fn pn_terminus_copy(terminus: *mut pn_terminus_t,
                            src: *mut pn_terminus_t) -> ::libc::c_int;
    pub fn pn_sender(session: *mut pn_session_t, name: *const ::libc::c_char)
     -> *mut pn_link_t;
    pub fn pn_receiver(session: *mut pn_session_t,
                       name: *const ::libc::c_char) -> *mut pn_link_t;
    pub fn pn_link_free(link: *mut pn_link_t) -> ();
    pub fn pn_link_get_context(link: *mut pn_link_t) -> *mut ::libc::c_void;
    pub fn pn_link_set_context(link: *mut pn_link_t,
                               context: *mut ::libc::c_void) -> ();
    pub fn pn_link_attachments(link: *mut pn_link_t) -> *mut pn_record_t;
    pub fn pn_link_name(link: *mut pn_link_t) -> *const ::libc::c_char;
    pub fn pn_link_is_sender(link: *mut pn_link_t) -> u8;
    pub fn pn_link_is_receiver(link: *mut pn_link_t) -> u8;
    pub fn pn_link_state(link: *mut pn_link_t) -> pn_state_t;
    pub fn pn_link_error(link: *mut pn_link_t) -> *mut pn_error_t;
    pub fn pn_link_condition(link: *mut pn_link_t) -> *mut pn_condition_t;
    pub fn pn_link_remote_condition(link: *mut pn_link_t)
     -> *mut pn_condition_t;
    pub fn pn_link_session(link: *mut pn_link_t) -> *mut pn_session_t;
    pub fn pn_link_head(connection: *mut pn_connection_t, state: pn_state_t)
     -> *mut pn_link_t;
    pub fn pn_link_next(link: *mut pn_link_t, state: pn_state_t)
     -> *mut pn_link_t;
    pub fn pn_link_open(link: *mut pn_link_t) -> ();
    pub fn pn_link_close(link: *mut pn_link_t) -> ();
    pub fn pn_link_detach(link: *mut pn_link_t) -> ();
    pub fn pn_link_source(link: *mut pn_link_t) -> *mut pn_terminus_t;
    pub fn pn_link_target(link: *mut pn_link_t) -> *mut pn_terminus_t;
    pub fn pn_link_remote_source(link: *mut pn_link_t) -> *mut pn_terminus_t;
    pub fn pn_link_remote_target(link: *mut pn_link_t) -> *mut pn_terminus_t;
    pub fn pn_link_current(link: *mut pn_link_t) -> *mut pn_delivery_t;
    pub fn pn_link_advance(link: *mut pn_link_t) -> u8;
    pub fn pn_link_credit(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_link_queued(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_link_remote_credit(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_link_get_drain(link: *mut pn_link_t) -> u8;
    pub fn pn_link_drained(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_link_available(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_link_snd_settle_mode(link: *mut pn_link_t)
     -> pn_snd_settle_mode_t;
    pub fn pn_link_rcv_settle_mode(link: *mut pn_link_t)
     -> pn_rcv_settle_mode_t;
    pub fn pn_link_set_snd_settle_mode(link: *mut pn_link_t,
                                       mode: pn_snd_settle_mode_t) -> ();
    pub fn pn_link_set_rcv_settle_mode(link: *mut pn_link_t,
                                       mode: pn_rcv_settle_mode_t) -> ();
    pub fn pn_link_remote_snd_settle_mode(link: *mut pn_link_t)
     -> pn_snd_settle_mode_t;
    pub fn pn_link_remote_rcv_settle_mode(link: *mut pn_link_t)
     -> pn_rcv_settle_mode_t;
    pub fn pn_link_unsettled(link: *mut pn_link_t) -> ::libc::c_int;
    pub fn pn_unsettled_head(link: *mut pn_link_t) -> *mut pn_delivery_t;
    pub fn pn_unsettled_next(delivery: *mut pn_delivery_t)
     -> *mut pn_delivery_t;
    pub fn pn_link_offered(sender: *mut pn_link_t, credit: ::libc::c_int)
     -> ();
    pub fn pn_link_send(sender: *mut pn_link_t, bytes: *const ::libc::c_char,
                        n: size_t) -> ssize_t;
    pub fn pn_link_flow(receiver: *mut pn_link_t, credit: ::libc::c_int)
     -> ();
    pub fn pn_link_drain(receiver: *mut pn_link_t, credit: ::libc::c_int)
     -> ();
    pub fn pn_link_set_drain(receiver: *mut pn_link_t, drain: u8) -> ();
    pub fn pn_link_recv(receiver: *mut pn_link_t, bytes: *mut ::libc::c_char,
                        n: size_t) -> ssize_t;
    pub fn pn_link_draining(receiver: *mut pn_link_t) -> u8;
    pub fn pn_event_type_name(_type: pn_event_type_t)
     -> *const ::libc::c_char;
    pub fn pn_collector() -> *mut pn_collector_t;
    pub fn pn_collector_free(collector: *mut pn_collector_t) -> ();
    pub fn pn_collector_release(collector: *mut pn_collector_t) -> ();
    pub fn pn_collector_put(collector: *mut pn_collector_t,
                            clazz: *const pn_class_t,
                            context: *mut ::libc::c_void,
                            _type: pn_event_type_t) -> *mut pn_event_t;
    pub fn pn_collector_peek(collector: *mut pn_collector_t)
     -> *mut pn_event_t;
    pub fn pn_collector_pop(collector: *mut pn_collector_t) -> u8;
    pub fn pn_collector_more(collector: *mut pn_collector_t) -> u8;
    pub fn pn_event_type(event: *mut pn_event_t) -> pn_event_type_t;
    pub fn pn_event_class(event: *mut pn_event_t) -> *const pn_class_t;
    pub fn pn_event_context(event: *mut pn_event_t) -> *mut ::libc::c_void;
    pub fn pn_event_connection(event: *mut pn_event_t)
     -> *mut pn_connection_t;
    pub fn pn_event_session(event: *mut pn_event_t) -> *mut pn_session_t;
    pub fn pn_event_link(event: *mut pn_event_t) -> *mut pn_link_t;
    pub fn pn_event_delivery(event: *mut pn_event_t) -> *mut pn_delivery_t;
    pub fn pn_event_transport(event: *mut pn_event_t) -> *mut pn_transport_t;
    pub fn pn_event_attachments(event: *mut pn_event_t) -> *mut pn_record_t;
    pub fn pn_transport() -> *mut pn_transport_t;
    pub fn pn_transport_set_server(transport: *mut pn_transport_t) -> ();
    pub fn pn_transport_free(transport: *mut pn_transport_t) -> ();
    pub fn pn_transport_get_user(transport: *mut pn_transport_t)
     -> *const ::libc::c_char;
    pub fn pn_transport_require_auth(transport: *mut pn_transport_t,
                                     required: u8) -> ();
    pub fn pn_transport_is_authenticated(transport: *mut pn_transport_t)
     -> u8;
    pub fn pn_transport_require_encryption(transport: *mut pn_transport_t,
                                           required: u8) -> ();
    pub fn pn_transport_is_encrypted(transport: *mut pn_transport_t) -> u8;
    pub fn pn_transport_condition(transport: *mut pn_transport_t)
     -> *mut pn_condition_t;
    pub fn pn_transport_error(transport: *mut pn_transport_t)
     -> *mut pn_error_t;
    pub fn pn_transport_bind(transport: *mut pn_transport_t,
                             connection: *mut pn_connection_t)
     -> ::libc::c_int;
    pub fn pn_transport_unbind(transport: *mut pn_transport_t)
     -> ::libc::c_int;
    pub fn pn_transport_trace(transport: *mut pn_transport_t,
                              trace: pn_trace_t) -> ();
    pub fn pn_transport_set_tracer(transport: *mut pn_transport_t,
                                   tracer: pn_tracer_t) -> ();
    pub fn pn_transport_get_tracer(transport: *mut pn_transport_t)
     -> pn_tracer_t;
    pub fn pn_transport_get_context(transport: *mut pn_transport_t)
     -> *mut ::libc::c_void;
    pub fn pn_transport_set_context(transport: *mut pn_transport_t,
                                    context: *mut ::libc::c_void) -> ();
    pub fn pn_transport_attachments(transport: *mut pn_transport_t)
     -> *mut pn_record_t;
    pub fn pn_transport_log(transport: *mut pn_transport_t,
                            message: *const ::libc::c_char) -> ();
    pub fn pn_transport_vlogf(transport: *mut pn_transport_t,
                              fmt: *const ::libc::c_char, ap: va_list) -> ();
    pub fn pn_transport_logf(transport: *mut pn_transport_t,
                             fmt: *const ::libc::c_char, ...) -> ();
    pub fn pn_transport_get_channel_max(transport: *mut pn_transport_t)
     -> uint16_t;
    pub fn pn_transport_set_channel_max(transport: *mut pn_transport_t,
                                        channel_max: uint16_t) -> ();
    pub fn pn_transport_remote_channel_max(transport: *mut pn_transport_t)
     -> uint16_t;
    pub fn pn_transport_get_max_frame(transport: *mut pn_transport_t)
     -> uint32_t;
    pub fn pn_transport_set_max_frame(transport: *mut pn_transport_t,
                                      size: uint32_t) -> ();
    pub fn pn_transport_get_remote_max_frame(transport: *mut pn_transport_t)
     -> uint32_t;
    pub fn pn_transport_get_idle_timeout(transport: *mut pn_transport_t)
     -> pn_millis_t;
    pub fn pn_transport_set_idle_timeout(transport: *mut pn_transport_t,
                                         timeout: pn_millis_t) -> ();
    pub fn pn_transport_get_remote_idle_timeout(transport:
                                                    *mut pn_transport_t)
     -> pn_millis_t;
    pub fn pn_transport_input(transport: *mut pn_transport_t,
                              bytes: *const ::libc::c_char, available: size_t)
     -> ssize_t;
    pub fn pn_transport_output(transport: *mut pn_transport_t,
                               bytes: *mut ::libc::c_char, size: size_t)
     -> ssize_t;
    pub fn pn_transport_capacity(transport: *mut pn_transport_t) -> ssize_t;
    pub fn pn_transport_tail(transport: *mut pn_transport_t)
     -> *mut ::libc::c_char;
    pub fn pn_transport_push(transport: *mut pn_transport_t,
                             src: *const ::libc::c_char, size: size_t)
     -> ssize_t;
    pub fn pn_transport_process(transport: *mut pn_transport_t, size: size_t)
     -> ::libc::c_int;
    pub fn pn_transport_close_tail(transport: *mut pn_transport_t)
     -> ::libc::c_int;
    pub fn pn_transport_pending(transport: *mut pn_transport_t) -> ssize_t;
    pub fn pn_transport_head(transport: *mut pn_transport_t)
     -> *const ::libc::c_char;
    pub fn pn_transport_peek(transport: *mut pn_transport_t,
                             dst: *mut ::libc::c_char, size: size_t)
     -> ssize_t;
    pub fn pn_transport_pop(transport: *mut pn_transport_t, size: size_t)
     -> ();
    pub fn pn_transport_close_head(transport: *mut pn_transport_t)
     -> ::libc::c_int;
    pub fn pn_transport_quiesced(transport: *mut pn_transport_t) -> u8;
    pub fn pn_transport_closed(transport: *mut pn_transport_t) -> u8;
    pub fn pn_transport_tick(transport: *mut pn_transport_t,
                             now: pn_timestamp_t) -> pn_timestamp_t;
    pub fn pn_transport_get_frames_output(transport: *const pn_transport_t)
     -> uint64_t;
    pub fn pn_transport_get_frames_input(transport: *const pn_transport_t)
     -> uint64_t;
    pub fn pn_transport_connection(transport: *mut pn_transport_t)
     -> *mut pn_connection_t;
    pub fn pn_io() -> *mut pn_io_t;
    pub fn pn_io_free(io: *mut pn_io_t) -> ();
    pub fn pn_io_error(io: *mut pn_io_t) -> *mut pn_error_t;
    pub fn pn_connect(io: *mut pn_io_t, host: *const ::libc::c_char,
                      port: *const ::libc::c_char) -> pn_socket_t;
    pub fn pn_listen(io: *mut pn_io_t, host: *const ::libc::c_char,
                     port: *const ::libc::c_char) -> pn_socket_t;
    pub fn pn_accept(io: *mut pn_io_t, socket: pn_socket_t,
                     name: *mut ::libc::c_char, size: size_t) -> pn_socket_t;
    pub fn pn_close(io: *mut pn_io_t, socket: pn_socket_t) -> ();
    pub fn pn_send(io: *mut pn_io_t, socket: pn_socket_t,
                   buf: *const ::libc::c_void, size: size_t) -> ssize_t;
    pub fn pn_recv(io: *mut pn_io_t, socket: pn_socket_t,
                   buf: *mut ::libc::c_void, size: size_t) -> ssize_t;
    pub fn pn_pipe(io: *mut pn_io_t, dest: *mut pn_socket_t) -> ::libc::c_int;
    pub fn pn_read(io: *mut pn_io_t, socket: pn_socket_t,
                   buf: *mut ::libc::c_void, size: size_t) -> ssize_t;
    pub fn pn_write(io: *mut pn_io_t, socket: pn_socket_t,
                    buf: *const ::libc::c_void, size: size_t) -> ssize_t;
    pub fn pn_wouldblock(io: *mut pn_io_t) -> u8;
    pub fn pn_io_selector(io: *mut pn_io_t) -> *mut pn_selector_t;
    pub fn pn_selectables() -> *mut pn_selectables_t;
    pub fn pn_selectables_next(selectables: *mut pn_selectables_t)
     -> *mut pn_selectable_t;
    pub fn pn_selectables_free(selectables: *mut pn_selectables_t) -> ();
    pub fn pn_selectable() -> *mut pn_selectable_t;
    pub fn pn_selectable_on_readable(sel: *mut pn_selectable_t,
                                     readable:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut pn_selectable_t)
                                                                   -> ()>)
     -> ();
    pub fn pn_selectable_on_writable(sel: *mut pn_selectable_t,
                                     writable:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut pn_selectable_t)
                                                                   -> ()>)
     -> ();
    pub fn pn_selectable_on_expired(sel: *mut pn_selectable_t,
                                    expired:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut pn_selectable_t)
                                                                  -> ()>)
     -> ();
    pub fn pn_selectable_on_error(sel: *mut pn_selectable_t,
                                  error:
                                      ::std::option::Option<extern "C" fn(arg1:
                                                                              *mut pn_selectable_t)
                                                                -> ()>) -> ();
    pub fn pn_selectable_on_release(sel: *mut pn_selectable_t,
                                    release:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut pn_selectable_t)
                                                                  -> ()>)
     -> ();
    pub fn pn_selectable_on_finalize(sel: *mut pn_selectable_t,
                                     finalize:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut pn_selectable_t)
                                                                   -> ()>)
     -> ();
    pub fn pn_selectable_attachments(sel: *mut pn_selectable_t)
     -> *mut pn_record_t;
    pub fn pn_selectable_get_fd(selectable: *mut pn_selectable_t)
     -> pn_socket_t;
    pub fn pn_selectable_set_fd(selectable: *mut pn_selectable_t,
                                fd: pn_socket_t) -> ();
    pub fn pn_selectable_is_reading(selectable: *mut pn_selectable_t) -> u8;
    pub fn pn_selectable_set_reading(sel: *mut pn_selectable_t, reading: u8)
     -> ();
    pub fn pn_selectable_is_writing(selectable: *mut pn_selectable_t) -> u8;
    pub fn pn_selectable_set_writing(sel: *mut pn_selectable_t, writing: u8)
     -> ();
    pub fn pn_selectable_get_deadline(selectable: *mut pn_selectable_t)
     -> pn_timestamp_t;
    pub fn pn_selectable_set_deadline(sel: *mut pn_selectable_t,
                                      deadline: pn_timestamp_t) -> ();
    pub fn pn_selectable_readable(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_writable(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_error(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_expired(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_is_registered(selectable: *mut pn_selectable_t)
     -> u8;
    pub fn pn_selectable_set_registered(selectable: *mut pn_selectable_t,
                                        registered: u8) -> ();
    pub fn pn_selectable_is_terminal(selectable: *mut pn_selectable_t) -> u8;
    pub fn pn_selectable_terminate(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_release(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_free(selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selectable_collect(selectable: *mut pn_selectable_t,
                                 collector: *mut pn_collector_t) -> ();
    pub fn pn_ssl_present() -> u8;
    pub fn pn_ssl_domain(mode: pn_ssl_mode_t) -> *mut pn_ssl_domain_t;
    pub fn pn_ssl_domain_free(domain: *mut pn_ssl_domain_t) -> ();
    pub fn pn_ssl_domain_set_credentials(domain: *mut pn_ssl_domain_t,
                                         credential_1: *const ::libc::c_char,
                                         credential_2: *const ::libc::c_char,
                                         password: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_ssl_domain_set_trusted_ca_db(domain: *mut pn_ssl_domain_t,
                                           certificate_db:
                                               *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_ssl_domain_set_peer_authentication(domain: *mut pn_ssl_domain_t,
                                                 mode: pn_ssl_verify_mode_t,
                                                 trusted_CAs:
                                                     *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_ssl_domain_allow_unsecured_client(domain: *mut pn_ssl_domain_t)
     -> ::libc::c_int;
    pub fn pn_ssl(transport: *mut pn_transport_t) -> *mut pn_ssl_t;
    pub fn pn_ssl_init(ssl: *mut pn_ssl_t, domain: *mut pn_ssl_domain_t,
                       session_id: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pn_ssl_get_cipher_name(ssl: *mut pn_ssl_t,
                                  buffer: *mut ::libc::c_char, size: size_t)
     -> u8;
    pub fn pn_ssl_get_protocol_name(ssl: *mut pn_ssl_t,
                                    buffer: *mut ::libc::c_char, size: size_t)
     -> u8;
    pub fn pn_ssl_resume_status(ssl: *mut pn_ssl_t) -> pn_ssl_resume_status_t;
    pub fn pn_ssl_set_peer_hostname(ssl: *mut pn_ssl_t,
                                    hostname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_ssl_get_peer_hostname(ssl: *mut pn_ssl_t,
                                    hostname: *mut ::libc::c_char,
                                    bufsize: *mut size_t) -> ::libc::c_int;
    pub fn pn_ssl_get_remote_subject(ssl: *mut pn_ssl_t)
     -> *const ::libc::c_char;
    pub fn pn_handler(dispatch:
                          ::std::option::Option<extern "C" fn(arg1:
                                                                  *mut pn_handler_t,
                                                              arg2:
                                                                  *mut pn_event_t,
                                                              arg3:
                                                                  pn_event_type_t)
                                                    -> ()>)
     -> *mut pn_handler_t;
    pub fn pn_handler_new(dispatch:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      *mut pn_handler_t,
                                                                  arg2:
                                                                      *mut pn_event_t,
                                                                  arg3:
                                                                      pn_event_type_t)
                                                        -> ()>, size: size_t,
                          finalize:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      *mut pn_handler_t)
                                                        -> ()>)
     -> *mut pn_handler_t;
    pub fn pn_handler_free(handler: *mut pn_handler_t) -> ();
    pub fn pn_handler_mem(handler: *mut pn_handler_t) -> *mut ::libc::c_void;
    pub fn pn_handler_add(handler: *mut pn_handler_t,
                          child: *mut pn_handler_t) -> ();
    pub fn pn_handler_clear(handler: *mut pn_handler_t) -> ();
    pub fn pn_handler_dispatch(handler: *mut pn_handler_t,
                               event: *mut pn_event_t, _type: pn_event_type_t)
     -> ();
    pub fn pn_reactor() -> *mut pn_reactor_t;
    pub fn pn_reactor_attachments(reactor: *mut pn_reactor_t)
     -> *mut pn_record_t;
    pub fn pn_reactor_get_timeout(reactor: *mut pn_reactor_t) -> pn_millis_t;
    pub fn pn_reactor_set_timeout(reactor: *mut pn_reactor_t,
                                  timeout: pn_millis_t) -> ();
    pub fn pn_reactor_mark(reactor: *mut pn_reactor_t) -> pn_timestamp_t;
    pub fn pn_reactor_now(reactor: *mut pn_reactor_t) -> pn_timestamp_t;
    pub fn pn_reactor_yield(reactor: *mut pn_reactor_t) -> ();
    pub fn pn_reactor_free(reactor: *mut pn_reactor_t) -> ();
    pub fn pn_reactor_collector(reactor: *mut pn_reactor_t)
     -> *mut pn_collector_t;
    pub fn pn_reactor_get_global_handler(reactor: *mut pn_reactor_t)
     -> *mut pn_handler_t;
    pub fn pn_reactor_set_global_handler(reactor: *mut pn_reactor_t,
                                         handler: *mut pn_handler_t) -> ();
    pub fn pn_reactor_get_handler(reactor: *mut pn_reactor_t)
     -> *mut pn_handler_t;
    pub fn pn_reactor_set_handler(reactor: *mut pn_reactor_t,
                                  handler: *mut pn_handler_t) -> ();
    pub fn pn_reactor_io(reactor: *mut pn_reactor_t) -> *mut pn_io_t;
    pub fn pn_reactor_children(reactor: *mut pn_reactor_t) -> *mut pn_list_t;
    pub fn pn_reactor_selectable(reactor: *mut pn_reactor_t)
     -> *mut pn_selectable_t;
    pub fn pn_reactor_update(reactor: *mut pn_reactor_t,
                             selectable: *mut pn_selectable_t) -> ();
    pub fn pn_reactor_acceptor(reactor: *mut pn_reactor_t,
                               host: *const ::libc::c_char,
                               port: *const ::libc::c_char,
                               handler: *mut pn_handler_t)
     -> *mut pn_acceptor_t;
    pub fn pn_reactor_connection(reactor: *mut pn_reactor_t,
                                 handler: *mut pn_handler_t)
     -> *mut pn_connection_t;
    pub fn pn_reactor_wakeup(reactor: *mut pn_reactor_t) -> ::libc::c_int;
    pub fn pn_reactor_start(reactor: *mut pn_reactor_t) -> ();
    pub fn pn_reactor_quiesced(reactor: *mut pn_reactor_t) -> u8;
    pub fn pn_reactor_process(reactor: *mut pn_reactor_t) -> u8;
    pub fn pn_reactor_stop(reactor: *mut pn_reactor_t) -> ();
    pub fn pn_reactor_run(reactor: *mut pn_reactor_t) -> ();
    pub fn pn_reactor_schedule(reactor: *mut pn_reactor_t,
                               delay: ::libc::c_int,
                               handler: *mut pn_handler_t) -> *mut pn_task_t;
    pub fn pn_acceptor_set_ssl_domain(acceptor: *mut pn_acceptor_t,
                                      domain: *mut pn_ssl_domain_t) -> ();
    pub fn pn_acceptor_close(acceptor: *mut pn_acceptor_t) -> ();
    pub fn pn_timer(collector: *mut pn_collector_t) -> *mut pn_timer_t;
    pub fn pn_timer_deadline(timer: *mut pn_timer_t) -> pn_timestamp_t;
    pub fn pn_timer_tick(timer: *mut pn_timer_t, now: pn_timestamp_t) -> ();
    pub fn pn_timer_schedule(timer: *mut pn_timer_t, deadline: pn_timestamp_t)
     -> *mut pn_task_t;
    pub fn pn_timer_tasks(timer: *mut pn_timer_t) -> ::libc::c_int;
    pub fn pn_task_attachments(task: *mut pn_task_t) -> *mut pn_record_t;
    pub fn pn_class_reactor(clazz: *const pn_class_t,
                            object: *mut ::libc::c_void) -> *mut pn_reactor_t;
    pub fn pn_object_reactor(object: *mut ::libc::c_void)
     -> *mut pn_reactor_t;
    pub fn pn_event_reactor(event: *mut pn_event_t) -> *mut pn_reactor_t;
    pub fn pn_record_get_handler(record: *mut pn_record_t)
     -> *mut pn_handler_t;
    pub fn pn_record_set_handler(record: *mut pn_record_t,
                                 handler: *mut pn_handler_t) -> ();
    pub fn pn_handshaker() -> *mut pn_handshaker_t;
    pub fn pn_iohandler() -> *mut pn_iohandler_t;
    pub fn pn_flowcontroller(window: ::libc::c_int)
     -> *mut pn_flowcontroller_t;
    pub fn pn_log_enable(enabled: u8) -> ();
    pub fn pn_log_logger(logger: pn_logger_t) -> ();
    pub fn pn_message() -> *mut pn_message_t;
    pub fn pn_message_free(msg: *mut pn_message_t) -> ();
    pub fn pn_message_clear(msg: *mut pn_message_t) -> ();
    pub fn pn_message_errno(msg: *mut pn_message_t) -> ::libc::c_int;
    pub fn pn_message_error(msg: *mut pn_message_t) -> *mut pn_error_t;
    pub fn pn_message_is_inferred(msg: *mut pn_message_t) -> u8;
    pub fn pn_message_set_inferred(msg: *mut pn_message_t, inferred: u8)
     -> ::libc::c_int;
    pub fn pn_message_is_durable(msg: *mut pn_message_t) -> u8;
    pub fn pn_message_set_durable(msg: *mut pn_message_t, durable: u8)
     -> ::libc::c_int;
    pub fn pn_message_get_priority(msg: *mut pn_message_t) -> uint8_t;
    pub fn pn_message_set_priority(msg: *mut pn_message_t, priority: uint8_t)
     -> ::libc::c_int;
    pub fn pn_message_get_ttl(msg: *mut pn_message_t) -> pn_millis_t;
    pub fn pn_message_set_ttl(msg: *mut pn_message_t, ttl: pn_millis_t)
     -> ::libc::c_int;
    pub fn pn_message_is_first_acquirer(msg: *mut pn_message_t) -> u8;
    pub fn pn_message_set_first_acquirer(msg: *mut pn_message_t, first: u8)
     -> ::libc::c_int;
    pub fn pn_message_get_delivery_count(msg: *mut pn_message_t) -> uint32_t;
    pub fn pn_message_set_delivery_count(msg: *mut pn_message_t,
                                         count: uint32_t) -> ::libc::c_int;
    pub fn pn_message_id(msg: *mut pn_message_t) -> *mut pn_data_t;
    pub fn pn_message_get_id(msg: *mut pn_message_t) -> pn_atom_t;
    pub fn pn_message_set_id(msg: *mut pn_message_t, id: pn_atom_t)
     -> ::libc::c_int;
    pub fn pn_message_get_user_id(msg: *mut pn_message_t) -> pn_bytes_t;
    pub fn pn_message_set_user_id(msg: *mut pn_message_t, user_id: pn_bytes_t)
     -> ::libc::c_int;
    pub fn pn_message_get_address(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_address(msg: *mut pn_message_t,
                                  address: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_get_subject(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_subject(msg: *mut pn_message_t,
                                  subject: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_get_reply_to(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_reply_to(msg: *mut pn_message_t,
                                   reply_to: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_correlation_id(msg: *mut pn_message_t)
     -> *mut pn_data_t;
    pub fn pn_message_get_correlation_id(msg: *mut pn_message_t) -> pn_atom_t;
    pub fn pn_message_set_correlation_id(msg: *mut pn_message_t,
                                         id: pn_atom_t) -> ::libc::c_int;
    pub fn pn_message_get_content_type(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_content_type(msg: *mut pn_message_t,
                                       _type: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_get_content_encoding(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_content_encoding(msg: *mut pn_message_t,
                                           encoding: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_get_expiry_time(msg: *mut pn_message_t)
     -> pn_timestamp_t;
    pub fn pn_message_set_expiry_time(msg: *mut pn_message_t,
                                      time: pn_timestamp_t) -> ::libc::c_int;
    pub fn pn_message_get_creation_time(msg: *mut pn_message_t)
     -> pn_timestamp_t;
    pub fn pn_message_set_creation_time(msg: *mut pn_message_t,
                                        time: pn_timestamp_t)
     -> ::libc::c_int;
    pub fn pn_message_get_group_id(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_group_id(msg: *mut pn_message_t,
                                   group_id: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_get_group_sequence(msg: *mut pn_message_t)
     -> pn_sequence_t;
    pub fn pn_message_set_group_sequence(msg: *mut pn_message_t,
                                         n: pn_sequence_t) -> ::libc::c_int;
    pub fn pn_message_get_reply_to_group_id(msg: *mut pn_message_t)
     -> *const ::libc::c_char;
    pub fn pn_message_set_reply_to_group_id(msg: *mut pn_message_t,
                                            reply_to_group_id:
                                                *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_message_instructions(msg: *mut pn_message_t) -> *mut pn_data_t;
    pub fn pn_message_annotations(msg: *mut pn_message_t) -> *mut pn_data_t;
    pub fn pn_message_properties(msg: *mut pn_message_t) -> *mut pn_data_t;
    pub fn pn_message_body(msg: *mut pn_message_t) -> *mut pn_data_t;
    pub fn pn_message_decode(msg: *mut pn_message_t,
                             bytes: *const ::libc::c_char, size: size_t)
     -> ::libc::c_int;
    pub fn pn_message_encode(msg: *mut pn_message_t,
                             bytes: *mut ::libc::c_char, size: *mut size_t)
     -> ::libc::c_int;
    pub fn pn_message_data(msg: *mut pn_message_t, data: *mut pn_data_t)
     -> ::libc::c_int;
    pub fn pn_messenger(name: *const ::libc::c_char) -> *mut pn_messenger_t;
    pub fn pn_messenger_name(messenger: *mut pn_messenger_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_set_certificate(messenger: *mut pn_messenger_t,
                                        certificate: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_get_certificate(messenger: *mut pn_messenger_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_set_private_key(messenger: *mut pn_messenger_t,
                                        private_key: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_get_private_key(messenger: *mut pn_messenger_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_set_password(messenger: *mut pn_messenger_t,
                                     password: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_get_password(messenger: *mut pn_messenger_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_set_trusted_certificates(messenger:
                                                     *mut pn_messenger_t,
                                                 cert_db:
                                                     *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_get_trusted_certificates(messenger:
                                                     *mut pn_messenger_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_set_timeout(messenger: *mut pn_messenger_t,
                                    timeout: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_messenger_get_timeout(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_is_blocking(messenger: *mut pn_messenger_t) -> u8;
    pub fn pn_messenger_set_blocking(messenger: *mut pn_messenger_t,
                                     blocking: u8) -> ::libc::c_int;
    pub fn pn_messenger_is_passive(messenger: *mut pn_messenger_t) -> u8;
    pub fn pn_messenger_set_passive(messenger: *mut pn_messenger_t,
                                    passive: u8) -> ::libc::c_int;
    pub fn pn_messenger_free(messenger: *mut pn_messenger_t) -> ();
    pub fn pn_messenger_errno(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_error(messenger: *mut pn_messenger_t)
     -> *mut pn_error_t;
    pub fn pn_messenger_get_outgoing_window(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_set_outgoing_window(messenger: *mut pn_messenger_t,
                                            window: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_get_incoming_window(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_set_incoming_window(messenger: *mut pn_messenger_t,
                                            window: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_start(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_stop(messenger: *mut pn_messenger_t) -> ::libc::c_int;
    pub fn pn_messenger_stopped(messenger: *mut pn_messenger_t) -> u8;
    pub fn pn_messenger_subscribe(messenger: *mut pn_messenger_t,
                                  source: *const ::libc::c_char)
     -> *mut pn_subscription_t;
    pub fn pn_messenger_subscribe_ttl(messenger: *mut pn_messenger_t,
                                      source: *const ::libc::c_char,
                                      timeout: pn_seconds_t)
     -> *mut pn_subscription_t;
    pub fn pn_messenger_get_link(messenger: *mut pn_messenger_t,
                                 address: *const ::libc::c_char, sender: u8)
     -> *mut pn_link_t;
    pub fn pn_subscription_get_context(sub: *mut pn_subscription_t)
     -> *mut ::libc::c_void;
    pub fn pn_subscription_set_context(sub: *mut pn_subscription_t,
                                       context: *mut ::libc::c_void) -> ();
    pub fn pn_subscription_address(sub: *mut pn_subscription_t)
     -> *const ::libc::c_char;
    pub fn pn_messenger_put(messenger: *mut pn_messenger_t,
                            msg: *mut pn_message_t) -> ::libc::c_int;
    pub fn pn_messenger_status(messenger: *mut pn_messenger_t,
                               tracker: pn_tracker_t) -> pn_status_t;
    pub fn pn_messenger_delivery(messenger: *mut pn_messenger_t,
                                 tracker: pn_tracker_t) -> *mut pn_delivery_t;
    pub fn pn_messenger_buffered(messenger: *mut pn_messenger_t,
                                 tracker: pn_tracker_t) -> u8;
    pub fn pn_messenger_settle(messenger: *mut pn_messenger_t,
                               tracker: pn_tracker_t, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_outgoing_tracker(messenger: *mut pn_messenger_t)
     -> pn_tracker_t;
    pub fn pn_messenger_work(messenger: *mut pn_messenger_t,
                             timeout: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_messenger_interrupt(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_send(messenger: *mut pn_messenger_t, n: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_recv(messenger: *mut pn_messenger_t,
                             limit: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_messenger_receiving(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_get(messenger: *mut pn_messenger_t,
                            message: *mut pn_message_t) -> ::libc::c_int;
    pub fn pn_messenger_incoming_tracker(messenger: *mut pn_messenger_t)
     -> pn_tracker_t;
    pub fn pn_messenger_incoming_subscription(messenger: *mut pn_messenger_t)
     -> *mut pn_subscription_t;
    pub fn pn_messenger_accept(messenger: *mut pn_messenger_t,
                               tracker: pn_tracker_t, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_reject(messenger: *mut pn_messenger_t,
                               tracker: pn_tracker_t, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pn_messenger_tracker_link(messenger: *mut pn_messenger_t,
                                     tracker: pn_tracker_t) -> *mut pn_link_t;
    pub fn pn_messenger_outgoing(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_incoming(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_route(messenger: *mut pn_messenger_t,
                              pattern: *const ::libc::c_char,
                              address: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_rewrite(messenger: *mut pn_messenger_t,
                                pattern: *const ::libc::c_char,
                                address: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pn_messenger_selectable(messenger: *mut pn_messenger_t)
     -> *mut pn_selectable_t;
    pub fn pn_messenger_deadline(messenger: *mut pn_messenger_t)
     -> pn_timestamp_t;
    pub fn pn_messenger_set_flags(messenger: *mut pn_messenger_t,
                                  flags: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_messenger_get_flags(messenger: *mut pn_messenger_t)
     -> ::libc::c_int;
    pub fn pn_messenger_set_snd_settle_mode(messenger: *mut pn_messenger_t,
                                            mode: pn_snd_settle_mode_t)
     -> ::libc::c_int;
    pub fn pn_messenger_set_rcv_settle_mode(messenger: *mut pn_messenger_t,
                                            mode: pn_rcv_settle_mode_t)
     -> ::libc::c_int;
    pub fn pn_messenger_set_tracer(messenger: *mut pn_messenger_t,
                                   tracer: pn_tracer_t) -> ();
    pub fn pn_messenger_get_remote_idle_timeout(messenger:
                                                    *mut pn_messenger_t,
                                                address:
                                                    *const ::libc::c_char)
     -> pn_millis_t;
    pub fn pn_messenger_set_ssl_peer_authentication_mode(messenger:
                                                             *mut pn_messenger_t,
                                                         mode:
                                                             pn_ssl_verify_mode_t)
     -> ::libc::c_int;
    pub fn pn_parser() -> *mut pn_parser_t;
    pub fn pn_parser_parse(parser: *mut pn_parser_t,
                           str: *const ::libc::c_char, data: *mut pn_data_t)
     -> ::libc::c_int;
    pub fn pn_parser_errno(parser: *mut pn_parser_t) -> ::libc::c_int;
    pub fn pn_parser_error(parser: *mut pn_parser_t) -> *const ::libc::c_char;
    pub fn pn_parser_free(parser: *mut pn_parser_t) -> ();
    pub fn pn_sasl(transport: *mut pn_transport_t) -> *mut pn_sasl_t;
    pub fn pn_sasl_done(sasl: *mut pn_sasl_t, outcome: pn_sasl_outcome_t)
     -> ();
    pub fn pn_sasl_outcome(sasl: *mut pn_sasl_t) -> pn_sasl_outcome_t;
    pub fn pn_sasl_get_user(sasl: *mut pn_sasl_t) -> *const ::libc::c_char;
    pub fn pn_sasl_get_mech(sasl: *mut pn_sasl_t) -> *const ::libc::c_char;
    pub fn pn_sasl_allowed_mechs(sasl: *mut pn_sasl_t,
                                 mechs: *const ::libc::c_char) -> ();
    pub fn pn_sasl_config_name(sasl: *mut pn_sasl_t,
                               name: *const ::libc::c_char) -> ();
    pub fn pn_sasl_config_path(sasl: *mut pn_sasl_t,
                               path: *const ::libc::c_char) -> ();
    pub fn pn_scanner() -> *mut pn_scanner_t;
    pub fn pn_scanner_free(scanner: *mut pn_scanner_t) -> ();
    pub fn pn_scanner_token(scanner: *mut pn_scanner_t) -> pn_token_t;
    pub fn pn_scanner_err(scanner: *mut pn_scanner_t, code: ::libc::c_int,
                          fmt: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn pn_scanner_verr(scanner: *mut pn_scanner_t, code: ::libc::c_int,
                           fmt: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn pn_scanner_line_info(scanner: *mut pn_scanner_t,
                                line: *mut ::libc::c_int,
                                col: *mut ::libc::c_int) -> ();
    pub fn pn_scanner_errno(scanner: *mut pn_scanner_t) -> ::libc::c_int;
    pub fn pn_scanner_error(scanner: *mut pn_scanner_t)
     -> *const ::libc::c_char;
    pub fn pn_scanner_start(scanner: *mut pn_scanner_t,
                            input: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pn_scanner_scan(scanner: *mut pn_scanner_t) -> ::libc::c_int;
    pub fn pn_scanner_shift(scanner: *mut pn_scanner_t) -> ::libc::c_int;
    pub fn pni_selector() -> *mut pn_selector_t;
    pub fn pn_selector_free(selector: *mut pn_selector_t) -> ();
    pub fn pn_selector_add(selector: *mut pn_selector_t,
                           selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selector_update(selector: *mut pn_selector_t,
                              selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selector_remove(selector: *mut pn_selector_t,
                              selectable: *mut pn_selectable_t) -> ();
    pub fn pn_selector_size(selector: *mut pn_selector_t) -> size_t;
    pub fn pn_selector_select(select: *mut pn_selector_t,
                              timeout: ::libc::c_int) -> ::libc::c_int;
    pub fn pn_selector_next(select: *mut pn_selector_t,
                            events: *mut ::libc::c_int)
     -> *mut pn_selectable_t;
    pub fn pn_url() -> *mut pn_url_t;
    pub fn pn_url_parse(url: *const ::libc::c_char) -> *mut pn_url_t;
    pub fn pn_url_free(url: *mut pn_url_t) -> ();
    pub fn pn_url_clear(url: *mut pn_url_t) -> ();
    pub fn pn_url_str(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_scheme(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_username(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_password(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_host(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_port(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_get_path(url: *mut pn_url_t) -> *const ::libc::c_char;
    pub fn pn_url_set_scheme(url: *mut pn_url_t,
                             scheme: *const ::libc::c_char) -> ();
    pub fn pn_url_set_username(url: *mut pn_url_t,
                               username: *const ::libc::c_char) -> ();
    pub fn pn_url_set_password(url: *mut pn_url_t,
                               password: *const ::libc::c_char) -> ();
    pub fn pn_url_set_host(url: *mut pn_url_t, host: *const ::libc::c_char)
     -> ();
    pub fn pn_url_set_port(url: *mut pn_url_t, port: *const ::libc::c_char)
     -> ();
    pub fn pn_url_set_path(url: *mut pn_url_t, path: *const ::libc::c_char)
     -> ();
}
